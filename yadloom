#!/usr/bin/env python3

from pathlib import Path
import copy
import json
import logging
import subprocess
import sys
logging.basicConfig(
    level=logging.DEBUG,
    handlers=[logging.StreamHandler(sys.stderr)]
)


gzdoom_args = ""
try:
    args = {'profile': sys.argv[1]}
    gzdoom_args = " ".join(sys.argv[2:])
except Exception as ex:
    logging.error(f"Usage: {sys.argv[0]} PROFILENAME [GZDOOM_ARGS]")
    exit(-1)



CONFIG = {}
with open(Path("~/.yadloom.json").expanduser().absolute()) as f:
    CONFIG.update(json.load(f))
    CONFIG['wadDir'] = Path(CONFIG['wadDir']).expanduser().resolve()

WAD_DIR = CONFIG['wadDir']
WAD_LISTS = CONFIG.get('wadLists', {})

def parse_profiles(p):
    def _resolve_wad(w) -> list:
        r =  [f"{WAD_DIR}/{w}"]
        if w.startswith("$") and w[1:] in WAD_LISTS:
            wl = WAD_LISTS[w[1:]]
            r =  [f"{WAD_DIR}/{ww}" for ww in wl]
        return r

    p = copy.deepcopy(p)
    for name,doom in p.items():
        doom['name'] = name
        for k,v in doom.items():
            if 'wad' in k or 'file' in k:
                if isinstance(v, list):
                    kv = []
                    for vv in v:
                        kv += _resolve_wad(vv)
                    doom[k] = kv
                else:
                    doom[k] = f"{WAD_DIR}/{v}"
    return p

def profile_to_cmdline(p:dict):
    r = ''
    p = copy.deepcopy(p)
    def __transform_keyname(k):
        if k[0] in ["+", "-"]:
            return f"{k}"
        return f"-{k}"
    for k,v in p.items():
        if k == 'name': continue
        if isinstance(v, list):
            r+= f" {__transform_keyname(k)} " +  ' '.join(['\"' + vv + '\"' for vv in v])
        else:
            r+= f" {__transform_keyname(k)} \"{v}\""
    return r

profiles = CONFIG['profiles']

parsed_profiles = parse_profiles(profiles)
active_profile = parsed_profiles.get(args['profile'])

logging.debug(args)
logging.debug(json.dumps(parsed_profiles, indent=2))
logging.debug(f"active profile: {json.dumps(active_profile, indent=2)}")
logging.debug(f"gzdoom_args: {gzdoom_args}")
gzdoom_args = profile_to_cmdline(active_profile) + f" {gzdoom_args}"
logging.debug(gzdoom_args)

# subprocess.call(f'gzdoom {gzdoom_args}', shell=True)
